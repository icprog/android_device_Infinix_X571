diff --git a/healthd/BatteryMonitor.cpp b/healthd/BatteryMonitor.cpp
index ee46f83..0bf248b 100644
--- a/healthd/BatteryMonitor.cpp
+++ b/healthd/BatteryMonitor.cpp
@@ -188,8 +188,10 @@ BatteryMonitor::PowerSupplyType BatteryMonitor::readPowerSupplyType(const String
         return ANDROID_POWER_SUPPLY_TYPE_UNKNOWN;
 
     ret = (BatteryMonitor::PowerSupplyType)mapSysfsString(buf, supplyTypeMap);
-    if (ret < 0)
+    if (ret < 0) {
+        KLOG_WARNING(LOG_TAG, "Unknown power supply type '%s'\n", buf);
         ret = ANDROID_POWER_SUPPLY_TYPE_UNKNOWN;
+    }
 
     return ret;
 }
@@ -221,7 +223,7 @@ int BatteryMonitor::getIntField(const String8& path) {
 
 bool BatteryMonitor::update(void) {
     bool logthis;
-
+    double MaxPower = 0;
     initBatteryProperties(&props);
 
     if (!mHealthdConfig->batteryPresentPath.isEmpty())
@@ -232,11 +234,33 @@ bool BatteryMonitor::update(void) {
     props.batteryLevel = mBatteryFixedCapacity ?
         mBatteryFixedCapacity :
         getIntField(mHealthdConfig->batteryCapacityPath);
-    props.batteryVoltage = getIntField(mHealthdConfig->batteryVoltagePath) / 1000;
+
+#ifndef MTK_HARDWARE
+        props.batteryVoltage = getIntField(mHealthdConfig->batteryVoltagePath) / 1000;
+#else
+        props.batteryVoltage = getIntField(mHealthdConfig->batteryVoltagePath);
+#endif
 
     if (!mHealthdConfig->batteryCurrentNowPath.isEmpty())
         props.batteryCurrent = getIntField(mHealthdConfig->batteryCurrentNowPath) / 1000;
-
+    
+    if ((!mHealthdConfig->batteryCurrentMaxPath.isEmpty()) && (!mHealthdConfig->batteryVoltageMaxPath.isEmpty())) {
+       int ChargingCurrent = getIntField(mHealthdConfig->batteryCurrentMaxPath);
+       int ChargingVoltage = getIntField(mHealthdConfig->batteryVoltageMaxPath);
+       double power = ((double)ChargingCurrent / MILLION) * ((double)ChargingVoltage / MILLION);
+        if (MaxPower < power) {
+            props.maxChargingCurrent = ChargingCurrent;
+            props.maxChargingVoltage = ChargingVoltage;
+            MaxPower = power;
+        } else {
+	    props.maxChargingCurrent = 0;
+            props.maxChargingVoltage = DEFAULT_VBUS_VOLTAGE; 
+	} 
+    } else {
+       props.maxChargingCurrent = 0;
+       props.maxChargingVoltage = DEFAULT_VBUS_VOLTAGE;      
+    }
+   
     if (!mHealthdConfig->batteryFullChargePath.isEmpty())
         props.batteryFullCharge = getIntField(mHealthdConfig->batteryFullChargePath);
 
@@ -299,40 +323,17 @@ bool BatteryMonitor::update(void) {
     }
 
     unsigned int i;
-    double MaxPower = 0;
 
-    // reinitialize the mChargerNames vector everytime there is an update
+    for (i = 0; i < mChargerNames.size(); i++) {
     String8 path;
-    DIR* dir = opendir(POWER_SUPPLY_SYSFS_PATH);
-    if (dir == NULL) {
-        KLOG_ERROR(LOG_TAG, "Could not open %s\n", POWER_SUPPLY_SYSFS_PATH);
-    } else {
-        struct dirent* entry;
-        // reconstruct the charger strings
-        mChargerNames.clear();
-        while ((entry = readdir(dir))) {
-            const char* name = entry->d_name;
-
-            if (!strcmp(name, ".") || !strcmp(name, ".."))
-                continue;
+        path.appendFormat("%s/%s/online", POWER_SUPPLY_SYSFS_PATH,
+                          mChargerNames[i].string());
 
-            // Look for "type" file in each subdirectory
-            path.clear();
-            path.appendFormat("%s/%s/type", POWER_SUPPLY_SYSFS_PATH, name);
-            switch(readPowerSupplyType(path)) {
-            case ANDROID_POWER_SUPPLY_TYPE_BATTERY:
-            case ANDROID_POWER_SUPPLY_TYPE_DOCK_BATTERY:
-                break;
-            default:
-                path.clear();
-                path.appendFormat("%s/%s/online", POWER_SUPPLY_SYSFS_PATH, name);
-                if (access(path.string(), R_OK) == 0) {
-                    mChargerNames.add(String8(name));
                     if (readFromFile(path, buf, SIZE) > 0) {
                         if (buf[0] != '0') {
                             path.clear();
                             path.appendFormat("%s/%s/type", POWER_SUPPLY_SYSFS_PATH,
-                                              name);
+                                  mChargerNames[i].string());
                             switch(readPowerSupplyType(path)) {
                             case ANDROID_POWER_SUPPLY_TYPE_AC:
                                 props.chargerAcOnline = true;
@@ -349,52 +350,14 @@ bool BatteryMonitor::update(void) {
                                 }
                             default:
                                 KLOG_WARNING(LOG_TAG, "%s: Unknown power supply type\n",
-                                             name);
+                                 mChargerNames[i].string());
                             }
 
-#ifdef BATTERY_REAL_INFO
-                int ChargingCurrent =
-                      (access(SYSFS_BATTERY_CURRENT, R_OK) == 0) ? abs(getIntField(String8(SYSFS_BATTERY_CURRENT))) : 0;
-
-                int ChargingVoltage =
-                      (access(SYSFS_BATTERY_VOLTAGE, R_OK) == 0) ? getIntField(String8(SYSFS_BATTERY_VOLTAGE)) :
-                       DEFAULT_VBUS_VOLTAGE;
-#else
-
-                            //If its online, read the voltage and current for power
-                            path.clear();
-                            path.appendFormat("%s/%s/current_max", POWER_SUPPLY_SYSFS_PATH,
-                                            name);
-                            int ChargingCurrent =
-                                          (access(path.string(), R_OK) == 0) ? getIntField(path) : 0;
-
-                            path.clear();
-                            path.appendFormat("%s/%s/voltage_max", POWER_SUPPLY_SYSFS_PATH,
-                                            name);
-
-                            int ChargingVoltage =
-                              (access(path.string(), R_OK) == 0) ? getIntField(path) :
-                              DEFAULT_VBUS_VOLTAGE;
-
-#endif
-
-                            double power = ((double)ChargingCurrent / MILLION) *
-                                    ((double)ChargingVoltage / MILLION);
-                            if (MaxPower < power) {
-                                props.maxChargingCurrent = ChargingCurrent;
-                                props.maxChargingVoltage = ChargingVoltage;
-                                MaxPower = power;
-                            }
                         }
                     }
                 }
-                break;
-            } //switch
-        } //while
-        closedir(dir);
-    }//else
 
-    logthis = !healthd_board_battery_update(&props);
+    logthis = true; //!healthd_board_battery_update(&props);
 
     if (logthis) {
         char dmesgline[256];
@@ -403,12 +366,12 @@ bool BatteryMonitor::update(void) {
 
         if (props.batteryPresent) {
             snprintf(dmesgline, sizeof(dmesgline),
-                 "battery [l=%d v=%d t=%s%d.%d h=%d st=%d]",
+                 "battery [Level=%d Voltage=%d Temp=%s%d.%d Health=%d Status=%d ChgCurrent=%d ChgVoltage=%d]",
                  props.batteryLevel, props.batteryVoltage,
                  props.batteryTemperature < 0 ? "-" : "",
                  abs(props.batteryTemperature / 10),
                  abs(props.batteryTemperature % 10), props.batteryHealth,
-                 props.batteryStatus);
+                 props.batteryStatus, props.maxChargingCurrent/1000 <= 0 ? 0 : props.maxChargingCurrent/1000, props.maxChargingVoltage/1000 <= 0 ? 0 : props.maxChargingVoltage/1000);
 
             len = strlen(dmesgline);
             if (!mHealthdConfig->batteryCurrentNowPath.isEmpty()) {
@@ -774,7 +737,23 @@ void BatteryMonitor::init(struct healthd_config *hc) {
                     if (access(path, R_OK) == 0)
                         mHealthdConfig->batteryFullChargePath = path;
                 }
-
+                
+                if (mHealthdConfig->batteryCurrentMaxPath.isEmpty()) {
+                    path.clear();
+                    path.appendFormat("%s/%s/current_max",
+                                      POWER_SUPPLY_SYSFS_PATH, name);
+                    if (access(path, R_OK) == 0)
+                        mHealthdConfig->batteryCurrentMaxPath = path;
+                }
+                
+                if (mHealthdConfig->batteryVoltageMaxPath.isEmpty()) {
+                    path.clear();
+                    path.appendFormat("%s/%s/voltage_max",
+                                      POWER_SUPPLY_SYSFS_PATH, name);
+                    if (access(path, R_OK) == 0)
+                        mHealthdConfig->batteryVoltageMaxPath = path;
+                }
+                
                 if (mHealthdConfig->batteryCurrentNowPath.isEmpty()) {
                     path.clear();
                     path.appendFormat("%s/%s/current_now",
@@ -966,6 +945,10 @@ void BatteryMonitor::init(struct healthd_config *hc) {
             KLOG_WARNING(LOG_TAG, "BatteryTechnologyPath not found\n");
         if (mHealthdConfig->batteryCurrentNowPath.isEmpty())
             KLOG_WARNING(LOG_TAG, "BatteryCurrentNowPath not found\n");
+        if (mHealthdConfig->batteryCurrentMaxPath.isEmpty())
+            KLOG_WARNING(LOG_TAG, "batteryCurrentMaxPath not found\n");
+        if (mHealthdConfig->batteryVoltageMaxPath.isEmpty())
+            KLOG_WARNING(LOG_TAG, "batteryVoltageMaxPath not found\n");	
         if (mHealthdConfig->batteryFullChargePath.isEmpty())
             KLOG_WARNING(LOG_TAG, "BatteryFullChargePath not found\n");
         if (mHealthdConfig->batteryCycleCountPath.isEmpty())
diff --git a/healthd/healthd.cpp b/healthd/healthd.cpp
index 45d96c9..c6a34bb 100644
--- a/healthd/healthd.cpp
+++ b/healthd/healthd.cpp
@@ -37,25 +37,8 @@
 using namespace android;
 
 // Periodic chores intervals in seconds
-#ifndef BOARD_PERIODIC_CHORES_INTERVAL_FAST
- #ifdef QCOM_HARDWARE
-  #define DEFAULT_PERIODIC_CHORES_INTERVAL_FAST (60 * 10)
- #else
-  #define DEFAULT_PERIODIC_CHORES_INTERVAL_FAST (60 * 1)
- #endif
-#else
-  #define DEFAULT_PERIODIC_CHORES_INTERVAL_FAST (BOARD_PERIODIC_CHORES_INTERVAL_FAST)
-#endif
-
-#ifndef BOARD_PERIODIC_CHORES_INTERVAL_SLOW
- #ifdef QCOM_HARDWARE
-  #define DEFAULT_PERIODIC_CHORES_INTERVAL_SLOW -1
- #else
-  #define DEFAULT_PERIODIC_CHORES_INTERVAL_SLOW (60 * 10)
- #endif
-#else
-  #define DEFAULT_PERIODIC_CHORES_INTERVAL_SLOW (BOARD_PERIODIC_CHORES_INTERVAL_SLOW)
-#endif
+#define DEFAULT_PERIODIC_CHORES_INTERVAL_FAST (24 * 60 * 60)
+#define DEFAULT_PERIODIC_CHORES_INTERVAL_SLOW (24 * 60 * 60)
 
 static struct healthd_config healthd_config = {
     .periodic_chores_interval_fast = DEFAULT_PERIODIC_CHORES_INTERVAL_FAST,
@@ -72,6 +55,8 @@ static struct healthd_config healthd_config = {
     .batteryChargeCounterPath = String8(String8::kEmptyString),
     .batteryFullChargePath = String8(String8::kEmptyString),
     .batteryCycleCountPath = String8(String8::kEmptyString),
+    .batteryCurrentMaxPath = String8(String8::kEmptyString),
+    .batteryVoltageMaxPath = String8(String8::kEmptyString),
     .energyCounter = NULL,
     .boot_min_cap = 0,
     .screen_on = NULL,
@@ -314,17 +299,12 @@ static void wakealarm_init(void) {
 }
 
 static void healthd_mainloop(void) {
-    int nevents = 0;
     while (1) {
         struct epoll_event events[eventct];
+        int nevents;
         int timeout = awake_poll_interval;
         int mode_timeout;
 
-        /* Don't wait for first timer timeout to run periodic chores */
-        if (!nevents)
-            periodic_chores();
-
-        healthd_mode_ops->heartbeat();
 
         mode_timeout = healthd_mode_ops->preparetowait();
         if (timeout < 0 || (mode_timeout > 0 && mode_timeout < timeout))
@@ -341,6 +321,10 @@ static void healthd_mainloop(void) {
             if (events[n].data.ptr)
                 (*(void (*)(int))events[n].data.ptr)(events[n].events);
         }
+        if (!nevents)
+            periodic_chores();
+
+        healthd_mode_ops->heartbeat();
     }
 
     return;
@@ -397,9 +381,6 @@ int main(int argc, char **argv) {
         exit(2);
     }
 
-    periodic_chores();
-    healthd_mode_ops->heartbeat();
-
     healthd_mainloop();
     KLOG_ERROR("Main loop terminated, exiting\n");
     return 3;
diff --git a/healthd/healthd_board_default.cpp b/healthd/healthd_board_default.cpp
index fdb970b..960f0d2 100644
--- a/healthd/healthd_board_default.cpp
+++ b/healthd/healthd_board_default.cpp
@@ -25,7 +25,7 @@ void healthd_board_init(struct healthd_config*)
 int healthd_board_battery_update(struct android::BatteryProperties*)
 {
     // return 0 to log periodic polled battery status to kernel log
-    return 1;
+    return 0;
 }
 
 void healthd_board_mode_charger_draw_battery(struct android::BatteryProperties*)
diff --git a/healthd/include/healthd/healthd.h b/healthd/include/healthd/healthd.h
index e9f9da3..983a572 100644
--- a/healthd/include/healthd/healthd.h
+++ b/healthd/include/healthd/healthd.h
@@ -85,7 +85,8 @@ struct healthd_config {
     android::String8 batteryChargeCounterPath;
     android::String8 batteryFullChargePath;
     android::String8 batteryCycleCountPath;
-
+    android::String8 batteryCurrentMaxPath;
+    android::String8 batteryVoltageMaxPath;
     int (*energyCounter)(int64_t *);
     int boot_min_cap;
     bool (*screen_on)(android::BatteryProperties *props);
